# -*- coding:gb2312 -*-

from numpy import *

adj=zeros([65,65],int)

#中心性指标集合,格式:[度中心性,介数中心性,接近中心性]
#train
X_train=[[29,0.20089716941995484,0.5833333333333334],[2,0.0,0.3727810650887574],[27,0.16427966506051503,0.5727272727272728],[10,0.0,0.44999999999999996],[10,0.0,0.44999999999999996],[7,0.03137224043522047,0.4344827586206897],[22,0.13705370000812914,0.5],[6,0.006466523747629736,0.3987341772151899],[4,0.0,0.38888888888888884],[18,0.04693460914659071,0.47368421052631576],[10,0.0,0.40909090909090906],[10,0.0,0.40909090909090906],[10,0.0,0.40909090909090906],[11,0.006739607891681621,0.411764705882353],[11,0.026380659790798035,0.411764705882353],[16,0.030028554798140056,0.4666666666666667],[15,0.09002491080064044,0.47368421052631576],[16,0.11891971720440744,0.4809160305343511],[8,0.0754137681173011,0.4012738853503185],[11,0.007268427084095287,0.4632352941176471],[12,0.013148488878135576,0.47368421052631576],[14,0.12616081681621874,0.49606299212598426],[12,0.027005120668715132,0.4598540145985402],[11,0.13772902712994878,0.48837209302325585],[17,0.03246839779097843,0.5080645161290323],[10,0.0030872694467164513,0.44680851063829785],[4,0.0,0.39622641509433965],[8,0.0,0.42857142857142855],[10,0.0,0.40909090909090906],[13,0.08407838108298937,0.4532374100719424],[6,0.00881147071623262,0.3684210526315789],[2,5.76036866359447E-4,0.3333333333333333],[2,2.0115573110964812E-4,0.34054054054054056],[2,0.0,0.34054054054054056],[1,0.0,0.3351063829787234],[6,0.02380505368216581,0.35593220338983056],[2,0.0,0.33689839572192515],[1,0.0,0.32307692307692304],[2,6.400409626216078E-4,0.30582524271844663],[5,8.960573476702509E-4,0.35593220338983056],[5,8.960573476702509E-4,0.35593220338983056],[1,0.0,0.32307692307692304],[1,0.0,0.32307692307692304],[5,0.014277586781427022,0.375],[3,0.020199023322423227,0.36627906976744184],[1,0.0,0.32642487046632124],[4,0.0,0.2971698113207547],[4,0.0,0.2971698113207547],[4,0.0,0.2971698113207547],[11,0.2296569891295954,0.43150684931506844],[3,0.0,0.3387096774193548],[5,0.012924486618803055,0.3620689655172414],[1,0.0,0.3333333333333333],[2,0.0,0.315],[2,0.0,0.315],[8,0.04687338245965997,0.32307692307692304],[5,0.0,0.2490118577075099],[1,0.0,0.24513618677042803],[6,0.005076329244275992,0.315],[6,0.005076329244275992,0.315],[6,0.005076329244275992,0.315],[6,0.005076329244275992,0.315],[2,0.0,0.3073170731707317],[1,0.0,0.3028846153846154]]
#les
X_les=[[10,0.17684210526315788,0.4293785310734463],[1,0.0,0.30158730158730157],[3,0.0,0.41304347826086957],[3,0.0,0.41304347826086957],[1,0.0,0.30158730158730157],[1,0.0,0.30158730158730157],[1,0.0,0.30158730158730157],[1,0.0,0.30158730158730157],[1,0.0,0.30158730158730157],[1,0.0,0.30158730158730157],[1,0.0,0.39378238341968913],[36,0.5699890527836184,0.6440677966101696],[2,0.0,0.41304347826086957],[1,0.0,0.39378238341968913],[1,0.0,0.39378238341968913],[1,0.0,0.39378238341968913],[9,0.040629348177335795,0.3917525773195876],[7,0.0,0.34080717488789236],[7,0.0,0.34080717488789236],[7,0.0,0.34080717488789236],[7,0.0,0.34080717488789236],[7,0.0,0.34080717488789236],[7,0.0,0.34080717488789236],[15,0.12964454098819425,0.46060606060606063],[11,0.029002418730461763,0.46060606060606063],[16,0.07490122123424225,0.5170068027210885],[11,0.02379625345414819,0.4779874213836478],[17,0.05433155966478436,0.5170068027210885],[4,0.026491228070175437,0.4021164021164021],[8,0.008040935672514621,0.42696629213483145],[2,0.0,0.3179916317991632],[4,0.008640295033483888,0.41758241758241754],[1,0.0,0.39378238341968913],[2,0.0,0.39583333333333337],[6,0.0,0.40425531914893614],[6,0.0,0.40425531914893614],[6,0.0,0.40425531914893614],[6,0.0,0.40425531914893614],[6,0.0,0.40425531914893614],[3,0.006925438596491229,0.37254901960784315],[1,0.0,0.34234234234234234],[11,0.011487550654163004,0.39583333333333337],[3,0.0,0.35185185185185186],[3,0.0,0.4021164021164021],[2,0.0,0.3979057591623037],[1,0.0,0.28787878787878785],[1,0.0,0.25675675675675674],[2,0.02631578947368421,0.3438914027149321],[22,0.16511250242584768,0.5135135135135135],[7,0.02021062158319776,0.4418604651162791],[2,2.1720969089390142E-4,0.33480176211453744],[7,0.04759892787524368,0.4418604651162791],[2,3.508771929824561E-4,0.3153526970954357],[1,0.0,0.3076923076923077],[4,0.0,0.36538461538461536],[19,0.132032488621946,0.5314685314685315],[2,0.0,0.35185185185185186],[11,0.027661236424394317,0.39583333333333337],[15,0.042553356822177105,0.4810126582278481],[11,0.0012501455659350395,0.3917525773195876],[9,0.0,0.3568075117370892],[11,0.0012501455659350395,0.3917525773195876],[13,0.00526702988198833,0.4],[12,0.0021854883087570067,0.39378238341968913],[13,0.030753650179957823,0.47500000000000003],[12,0.0021854883087570067,0.39378238341968913],[10,1.5037593984962405E-4,0.3584905660377359],[1,0.0,0.28464419475655434],[10,0.004960383978389518,0.46341463414634143],[10,0.004960383978389518,0.46341463414634143],[10,0.00486180419559921,0.45238095238095233],[9,0.003873829873829873,0.45783132530120485],[3,0.0,0.4021164021164021],[2,0.0,0.34234234234234234],[2,0.0,0.34234234234234234],[7,4.385964912280702E-4,0.37999999999999995],[7,0.0,0.35348837209302325]]
std_dc_train=6.21  #度中心性标准差
std_dc_les=6.04
std_bc_train=0.052216244	 #介数中心性标准差
std_bc_les=0.073

a=0.1  #影响因子(自行设定)
r1=0.51
r2=0.4
r3=0.3

#构建邻接矩阵
def init_adj():
	f=open("../data/train-data.txt",'r')
	error=0
	for line in f.readlines():
		tmp=line.split(' ')
		try:
			adj[int(tmp[0])][int(tmp[1])]=int(tmp[2][:-1])
			adj[int(tmp[1])][int(tmp[0])]=int(tmp[2][:-1])
		except:
			error+=1
	print 'failed lines count: ' + str(error)

#写入度数以及邻接矩阵
def write():
	out_degree=open("../degree.txt",'w')
	out_adj=open("../adjmatrix.txt",'w')
	count=0
	for i in adj:
		degree=0
		for j in i:
			out_adj.write(str(j)+' ')
			if j!=0:
				degree+=1
		out_adj.write('\n')
		out_degree.write(str(count)+' '+str(degree)+'\n')
		count+=1

#写入加权度
def weighted_degree():
	out_weighted_degree=open("../weighted_degree.txt",'w')
	count=0
	for i in adj:
		degree=0
		for j in i:
			if j!=0:
				degree+=j
		out_weighted_degree.write(str(count)+' '+str(degree)+'\n')
		count+=1

#隐蔽中心性计算
def covertness_centrality():
	out=open("../covertness_centrality_les.csv",'w')
	for i in range(0,77):
		if(commonness(i)==0):
			cc1=0
			cc2=0
			cc3=0
		else:
			cc1=r1*commonness(i)+(1-r1)*communication_potential(i)
			cc2=r2*commonness(i)+(1-r2)*communication_potential(i)
			cc3=r3*commonness(i)+(1-r3)*communication_potential(i)
		out.write(str(commonness(i))+','+str(communication_potential(i))+','+str(cc1)+','+str(cc2)+','+str(cc3)+'\n')
	return 0

#CM计算
def commonness(v):
	count=0
	for i in X_les:
		if abs(i[0]-X_les[v][0])<=std_dc_les*a and abs(i[1]-X_les[v][1])<=std_bc_les*a:
			count+=1
	cm=round((count-1)/76.000,3)
	return cm

#CP计算
def communication_potential(v):
	cp=X_les[v][2]
	return round(cp,3)

if __name__=="__main__":
	#init_adj()
	covertness_centrality()
	#write()
	#weighted_degree()